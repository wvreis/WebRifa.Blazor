@page "/buy-tickets"

@attribute [Authorize]

@using WebRifa.Blazor.BlazorServices
@using WebRifa.Blazor.Core.Dtos
@using WebRifa.Blazor.Core.Requests.Commands

@inject IBuyerBlazorService _buyerService
@inject IRaffleBlazorService _raffleService
@inject NavigationManager _navigationManager

@rendermode InteractiveServer

<div class="container">
    @if (IsLoading()) {
        <p>Carregando...</p>
    } else if (!Raffles?.Any() ?? new()){
        <p>Não há Rifas Cadastradas.</p>
    }
    else {
        <div class="raffle-body">
            <div class="raffle-buyer-fields">
                <EditForm Model="buyCommand" OnValidSubmit="ConfirmBuyAsync">
                    <DataAnnotationsValidator/>
                    <ValidationSummary/>

                    <div class="raffle-input">
                        <h1>Dados</h1>

                        <input 
                            placeholder="Rifa" 
                            id="raffleInput" 
                            list="raffles" 
                            @onchange="RaffleInputOnChange" />

                        <dataList id="raffles">
                            @foreach (var raffle in Raffles ?? new()) {
                                <option value="@raffle.Id">@raffle.Description</option>
                            }
                        </dataList>

                        @if (SelectedRaffle is not null) {
                            <span>
                                <strong>@("Descrição: ")</strong>
                                @($"{SelectedRaffle.Description}")
                            </span>
                            <span>
                                <strong>@("Preço do Bilhete: ")</strong>
                                @($"{SelectedRaffle.TicketPrice}")
                            </span>
                        }
                    </div>                    

                    <br />

                    @if (SelectedRaffle is not null) {
                        <div class="buyer-input">

                            <input 
                                placeholder="Comprador" 
                                id="buyerInput" 
                                list="buyers" 
                                @onchange="BuyerInputOnChenge" />

                            <dataList id="buyers">
                                @foreach (var buyer in Buyers ?? new()) {
                                    <option value="@buyer.Id">@buyer.Name</option>
                                }
                            </dataList>

                            @if (SelectedBuyer is not null) {
                                <span>
                                    <strong>@("Nome: ")</strong>
                                    @($"{SelectedBuyer.Name}")
                                </span>
                                <span>
                                    <strong>@("Telefone: ")</strong>
                                    @($"{SelectedBuyer.PhoneNumber}")

                                </span>
                            }
                        </div>
                    }

                    <br/>
                    <div class="info-container">
                        @if (buyCommand.NumbersToBuy.Any()) {
                            <p>Números selecionados</p>
                            <p>@string.Join(", ", buyCommand.NumbersToBuy)</p>

                            @if (SelectedBuyer is not null) {
                                <button>Finalizar Compra</button>
                            }
                        }
                    </div>
                </EditForm>
            </div>

            <div class="raffle-numbers">
                @if (Numbers.Any()) {
                    <h1>Lista de Posições na Rifa</h1>
                    <ul>
                        @foreach (var number in Numbers) {
                            <li class="@GetNumberClass(number)" @onclick="(() => AddOrRemoveNumber(number))">@number</li>
                        }
                    </ul>
                }
            </div>
        </div>
    }
</div>

@code {
    public List<RaffleDto>? Raffles { get; set; }
    public List<BuyerDto>? Buyers { get; set; }
    public RaffleDto? SelectedRaffle { get; set; }
    public BuyerDto? SelectedBuyer { get; set; }
    public List<int> Numbers { get; set; } = new();
    public List<int> FreeNumbers { get; set; } = new();
    public BuyRaffleTicketsCommand buyCommand { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        Raffles = await _raffleService.GetAllRafflesAsync();
        Buyers = await _buyerService.GetAllBuyersAsync();
    }

    async Task ConfirmBuyAsync()
    {
        buyCommand.Observations = string.Empty; //to-do: create field.

        var result = await _raffleService.BuyRaffleTicketsAsync(buyCommand);
        if (result.IsSuccessStatusCode) {
            var resultValue = await result.Content.ReadAsStringAsync(); //To-do: change back-end to retur Receipt Id.
            _navigationManager.NavigateTo($"receipts");
        }
        else {

        }
    }

    async void RaffleInputOnChange(ChangeEventArgs args)
    {
        if (string.IsNullOrEmpty(args.Value!.ToString()) || Raffles is null) {
            CleanScreen();
            return;
        }

        Guid.TryParse(args.Value.ToString(), out Guid raffleId);
        SelectedRaffle = Raffles.First(x => x.Id == raffleId);
        buyCommand.RaffleId = SelectedRaffle.Id;
        FreeNumbers = await _raffleService.GetFreeNumbers(new(){RaffleId = raffleId});
        Numbers = Enumerable.Range(1, SelectedRaffle.TotalNumberOfTickets).ToList();
        StateHasChanged();
    }

    void BuyerInputOnChenge(ChangeEventArgs args)
    {
        if (string.IsNullOrEmpty(args.Value!.ToString()) || Buyers is null) {
            CleanSelectedBuyer();
            return;
        }

        Guid.TryParse(args.Value.ToString(), out Guid buyerId);
        SelectedBuyer = Buyers.First(x => x.Id == buyerId);
        buyCommand.BuyerId = SelectedBuyer.Id;
        StateHasChanged();
    }

    void CleanScreen()
    {
        Numbers = new();
        buyCommand.NumbersToBuy = new();
        SelectedRaffle = null;
        SelectedBuyer = null;
    }

    void CleanSelectedBuyer()
    {
        SelectedBuyer = null;
        buyCommand.NumbersToBuy = new();
    }

    void AddSelectedNumber(int number)
    {
        buyCommand.NumbersToBuy.Add(number);
    }

    void RemoveSelectedNumber(int number)
    {
        buyCommand.NumbersToBuy.Remove(number);
    }

    void AddOrRemoveNumber(int number)
    {
        if (!IsSelectedNumber(number) && IsFreeNumber(number)) {
            AddSelectedNumber(number);
        }
        else {
            RemoveSelectedNumber(number);
        }

        StateHasChanged();
    }

    bool IsFreeNumber(int number) => 
        FreeNumbers.Contains(number);

    bool IsSelectedNumber(int number) =>
        buyCommand.NumbersToBuy.Contains(number);

    string GetNumberClass(int number)
    {
        if (!IsFreeNumber(number)) {
            return "unavailable-number";
        }

        if (IsSelectedNumber(number)) {
            return "selected-number";
        } 

        if (IsFreeNumber(number) && !IsSelectedNumber(number)) {
            return "available-number";            
        }

        return string.Empty;
    }

    bool IsLoading() =>
        Raffles is null &&
        Buyers is null;
}
