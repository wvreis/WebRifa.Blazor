@page "/tickets"
@using WebRifa.Blazor.BlazorServices
@using WebRifa.Blazor.Core.Dtos
@inject IBuyerBlazorService _buyerService
@inject IRaffleBlazorService _raffleService
@rendermode InteractiveServer

<div class="container">
    @if (Raffles is null) {
        <p>Carregando...</p>
    } else if (!Raffles.Any()){
        <p>Não há Rifas Cadastradas.</p>
    }
    else {
        <div class="">
            <label class="" for="raffle-input">Rifa:</label>
            <input class="raffle-input" id="raffleInput" list="raffles" @onchange="RaffleInputOnChange" />
    
            <dataList class="col-4" id="raffles">
                @foreach (var raffle in Raffles) {
                    <option value="@raffle.Id">@raffle.Description</option>
                }
            </dataList>

            @if (SelectedRaffle is not null) {
                <label class="col-auto col-form-label">
                    @($"Descrição: {SelectedRaffle.Description} | Preço do Bilhete: {SelectedRaffle.TicketPrice}")
                </label>
            }
        </div>
    }

    @if (Numbers.Any()) {
        <h1>Lista de Posições na Rifa</h1>
        <ul>
            @foreach (var number in Numbers) {
                <li class="@GetNumberClass(number)">@number</li>
            }
        </ul>
    }
</div>

@code {
    public List<RaffleDto>? Raffles { get; set; }
    public RaffleDto? SelectedRaffle { get; set; }
    public List<BuyerDto>? Buyers { get; set; }
    public BuyerDto? SelectedBuyer { get; set; }
    public List<int> Numbers { get; set; } = new();
    public List<int> SelectedNumbers { get; set; } = new();
    public List<int> FreeNumbers { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        Raffles = await _raffleService.GetAllRafflesAsync();
        Buyers = await _buyerService.GetAllBuyersAsync();
    }

    async void RaffleInputOnChange(ChangeEventArgs args)
    {
        if (string.IsNullOrEmpty(args.Value!.ToString()) || Raffles is null) {
            CleanScreen();
            return;
        }

        Guid.TryParse(args.Value.ToString(), out Guid raffleId);
        SelectedRaffle = Raffles.First(x => x.Id == raffleId);
        FreeNumbers = await _raffleService.GetFreeNumbers(new(){RaffleId = raffleId});
        Numbers = Enumerable.Range(1, SelectedRaffle.TotalNumberOfTickets).ToList();
        StateHasChanged();
    }

    void CleanScreen()
    {
        Numbers = new();
        SelectedNumbers = new();
        SelectedRaffle = null;
        SelectedBuyer = null;
    }

    string GetNumberClass(int number) =>
        FreeNumbers.Contains(number) ? "" : "unavailable-number";
}
