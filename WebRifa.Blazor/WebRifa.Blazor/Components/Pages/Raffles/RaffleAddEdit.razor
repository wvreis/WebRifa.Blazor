@page "/raffle"
@page "/raffle/{Id}"

@attribute [Authorize]
@rendermode InteractiveServer

@using WebRifa.Blazor.BlazorServices
@using WebRifa.Blazor.Core.Dtos
@using WebRifa.Blazor.Core.Requests.Queries.Raffle

@inject IRaffleBlazorService _raffleService
@inject NavigationManager _navigationManager
@inject IJSRuntime JS

<h3>@GetPageHeader() Rifa</h3>

@if (Raffle is null) {
    <p>Carregando...</p>
}
else {
    <EditForm Model="Raffle" OnValidSubmit="Save">
        <DataAnnotationsValidator />

        <div class="form-group m-1">
            <label for="description">Descrição:</label>
            <input type="text" class="form-control" id="description" @bind="Raffle!.Description" />
            <ValidationMessage For="() => Raffle.Description" />
        </div>

        <div class="form-group m-1">
            <label for="ticketprice">Preço do Bilhete:</label>
            <input type="number" class="form-control" id="ticketprice" @bind="Raffle!.TicketPrice" />
            <ValidationMessage For="() => Raffle.TicketPrice" />
        </div>

        <div class="form-group m-1">
            <label for="totalnumberofticktets">Total de Bilhetes:</label>
            <input type="number" class="form-control" id="totalnumberofticktets" @bind="Raffle!.TotalNumberOfTickets" />
            <ValidationMessage For="() => Raffle.TotalNumberOfTickets" />
        </div>

        <div class="form-group m-1">
            <label for="drawdate">Data do Sorteio:</label>
            <input type="date" class="form-control" id="drawdate" @bind="Raffle!.DrawDateTime" />
            <ValidationMessage For="() => Raffle.DrawDateTime" />
        </div>

        <div class="form-group m-1">
            <label for="observations">Observações:</label>
            <input type="text" class="form-control" id="observations" @bind="Raffle!.Observations" />
            <ValidationMessage For="() => Raffle.Observations" />
        </div>

        <button type="submit" class="btn btn-primary m-1">Salvar</button>
    </EditForm>
}

@code {
    [Parameter]
    public string? Id { get; set; }

    public RaffleDto? Raffle { get; set; }
    public RaffleGetQuery RaffleGetQuery { get; set; } = new();

    protected async override Task OnInitializedAsync()
    {
        if (IsNew()) {
            Raffle = new();
        }
        else {
            Guid.TryParse(Id, out Guid result);
            RaffleGetQuery.RaffleId = result;
            Raffle = await _raffleService.GetRaffleAsync(RaffleGetQuery);
        }
    }

    public async Task Save()
    {
        HttpResponseMessage result;

        if (Id is null) {
            result = await _raffleService.AddRaffleAsync(Raffle!);
        }
        else {
            result = await _raffleService.UpdateRaffleAsync(Raffle!);
        }

        if (result.IsSuccessStatusCode) {
            _navigationManager.NavigateTo("raffles");
        }
        else {
            await JS.ShowErrorMessage(result.ReasonPhrase!);
        }
    }

    bool IsNew() => Id is null ? true : false;
    string GetPageHeader() => IsNew() ? "Adicionando" : "Editando";
}
